[
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "Lab 1 - Quarto Warmup & STAT 331 Review\n\n\n\nQuarto\n\n\nR\n\n\n\nPractice quarto\n\n\n\nLiam Quach\n\n\nMay 4, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nLab 2 - Advanced Data Visualization\n\n\n\nQuarto\n\n\nR\n\n\n\nImprove bad visualizations\n\n\n\nLiam Quach\n\n\nMay 4, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLab 3: Static Dashboard\n\n\n\nQuarto\n\n\nR\n\n\nDashboards\n\n\n\nTransforming a Report into a Dashboard\n\n\n\nLiam Quach\n\n\nApr 21, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLab 4: Interactive Dashboard\n\n\n\nQuarto\n\n\nR\n\n\nDashboards\n\n\nShiny\n\n\n\nTransforming a Report into a Dashboard\n\n\n\nLiam Quach\n\n\nApr 21, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Liam Quach",
    "section": "",
    "text": "Hi, shitposting for 541"
  },
  {
    "objectID": "posts/Lab 1/index.html",
    "href": "posts/Lab 1/index.html",
    "title": "Lab 1 - Quarto Warmup & STAT 331 Review",
    "section": "",
    "text": "library(tidyverse)\nlibrary(ggridges)"
  },
  {
    "objectID": "posts/Lab 1/index.html#quarto",
    "href": "posts/Lab 1/index.html#quarto",
    "title": "Lab 1 - Quarto Warmup & STAT 331 Review",
    "section": "Quarto",
    "text": "Quarto\nFirst, let’s make sure you know how to use Markdown formatting to style a Quarto document.\n\nMake this text bold.\nMake this text italicized.\nMake these into a bullet point list:\n\n\nApples\nBananas\nPotatoes\n\n\nEdit the YAML to remove warning messages from being output in the rendered HTML file\nUsing code chunk options, make it so this chunk shows the plot but not the source code:\n\n\n\n\n\n\n\n\n\n\n\nUsing code chunk options, remove the messages about bandwidth geom_density_ridges() chose to use:\n\n\nggplot(data = mpg, \n       mapping = aes(y = manufacturer, x = hwy)) + \n  geom_density_ridges() +\n  labs(x = \"\",\n       y = \"\", \n       title = \"Highway Milage (mpg) for Different Car Manufacturers\"\n       )\n\n\n\n\n\n\n\n\n\nUsing code chunk options, make it so that these plots are printed side-by-side:\n\nggplot(data = mpg, \n       mapping = aes(y = manufacturer, x = hwy)) + \n  geom_boxplot() +\n  labs(x = \"\",\n       y = \"\", \n       title = \"Highway Milage (mpg) for Different Car Manufacturers\"\n       )\nggplot(data = mpg, \n       mapping = aes(y = manufacturer, x = hwy)) + \n  geom_density_ridges() +\n  labs(x = \"\",\n       y = \"\", \n       title = \"Highway Milage (mpg) for Different Car Manufacturers\"\n       )\n\n\n\n\n\n\n\n\n\n\n\nUsing code chunk options, make it so this chunk shows the code but not the output:\n\n\n2 + 2\n\n\nUsing code chunk options, make it so the file can still knit even though this chunk has an error\n\n\n2 + a\n\n\nUsing code chunk options, create a descriptive label for each of the code chunks above."
  },
  {
    "objectID": "posts/Lab 1/index.html#data-wrangling-review",
    "href": "posts/Lab 1/index.html#data-wrangling-review",
    "title": "Lab 1 - Quarto Warmup & STAT 331 Review",
    "section": "Data Wrangling Review",
    "text": "Data Wrangling Review\nSince you already seen some ggplots, let’s do a bit of review on data handling. In this class, we will exclusively make use of tools from the tidyverse suite of packages to perform our data cleaning and wrangling operations. If you are less familiar with these packages or it’s been some time since you used them, I would strongly recommend referencing the function documentation!\nFor these problems, we will continue to work with the mpg data frame, making various changes to the data to clean it up.\n\nThe fl variable describes the type of fuel for each car, with levels: p, r, e, d, and c. Do some research into what each of these labels mean! Then, use the if_else() function to create a new variable (fuel_type) with two levels: petrol (any car using petrolium-based gas) and alternative energy (any car not using petrolium-based gas).\n\n\nmpg &lt;- mpg |&gt; \n  mutate(fuel_type = if_else(fl %in% c(\"p\", \"r\"), \"petrol\", \"alternative energy\"))\n\nhead(mpg)\n\n# A tibble: 6 × 12\n  manufacturer model displ  year   cyl trans      drv     cty   hwy fl    class \n  &lt;chr&gt;        &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;      &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; \n1 audi         a4      1.8  1999     4 auto(l5)   f        18    29 p     compa…\n2 audi         a4      1.8  1999     4 manual(m5) f        21    29 p     compa…\n3 audi         a4      2    2008     4 manual(m6) f        20    31 p     compa…\n4 audi         a4      2    2008     4 auto(av)   f        21    30 p     compa…\n5 audi         a4      2.8  1999     6 auto(l5)   f        16    26 p     compa…\n6 audi         a4      2.8  1999     6 manual(m5) f        18    26 p     compa…\n# ℹ 1 more variable: fuel_type &lt;chr&gt;\n\n\n\nThe drv variable describes if the car has front drive (f), rear drive (r), or four wheel drive (4). Let’s make better labels for these values! Specifically, use the case_when() function to change the drv variable to have the following levels: front, rear, four wheel.\n\n\nmpg &lt;- mpg|&gt; \n  mutate(drv = case_when(\n    drv == 'f' ~ 'front',\n    drv == 'r' ~ 'rear',\n    drv == '4' ~ 'four wheel',\n    TRUE ~ drv  \n  ))\nhead(mpg)\n\n# A tibble: 6 × 12\n  manufacturer model displ  year   cyl trans      drv     cty   hwy fl    class \n  &lt;chr&gt;        &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;      &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; \n1 audi         a4      1.8  1999     4 auto(l5)   front    18    29 p     compa…\n2 audi         a4      1.8  1999     4 manual(m5) front    21    29 p     compa…\n3 audi         a4      2    2008     4 manual(m6) front    20    31 p     compa…\n4 audi         a4      2    2008     4 auto(av)   front    21    30 p     compa…\n5 audi         a4      2.8  1999     6 auto(l5)   front    16    26 p     compa…\n6 audi         a4      2.8  1999     6 manual(m5) front    18    26 p     compa…\n# ℹ 1 more variable: fuel_type &lt;chr&gt;\n\n\n(string split + remove extra “)” )13. The trans variable contains two pieces of information, (1) the transmission style (auto or manual) and the specific type of transmission (e.g., l5, m5). Using the str_split() function, create a new variable (trans_type) containing the specific type of transmission of each car. Once you’ve made this new variable, use the rename() function to change the name of the trans column to trans_style.\nHint: You will need to deal with the stray parenthesis!\n\nmpg &lt;- mpg %&gt;%\n  mutate(trans_type = sapply(str_split(trans, \"\\\\(\"), function(x) gsub(\"\\\\)\", \"\", x[2]))) %&gt;%\n  rename(trans_style = trans)\n\nmpg |&gt; select(trans_type, trans_style)\n\n# A tibble: 234 × 2\n   trans_type trans_style\n   &lt;chr&gt;      &lt;chr&gt;      \n 1 l5         auto(l5)   \n 2 m5         manual(m5) \n 3 m6         manual(m6) \n 4 av         auto(av)   \n 5 l5         auto(l5)   \n 6 m5         manual(m5) \n 7 av         auto(av)   \n 8 m5         manual(m5) \n 9 l5         auto(l5)   \n10 m6         manual(m6) \n# ℹ 224 more rows"
  },
  {
    "objectID": "posts/Lab 1/index.html#getting-to-know-your-classmates",
    "href": "posts/Lab 1/index.html#getting-to-know-your-classmates",
    "title": "Lab 1 - Quarto Warmup & STAT 331 Review",
    "section": "Getting to know your classmates",
    "text": "Getting to know your classmates\n\nFind someone who took Stat 331 from a different professor than you. Compare your experiences. Tell me their name and professor. List one or two things that you think you learned more about, and one or two things that they learned more about.\n\nRachel took it with the Quarto Queen Dr. Theobold.\nI took it with Dr. Robinson.\nWe learn a lot about tidyverse and how amazing ggplot is. I learn more about which color pallette is user friendly.\nRachel learned more about data wrangling.\n\nFind someone in the class who does not share your birth month. Tell me their name and birthday, and use R to find out how many days apart your birthdays are.\n\n\nmy_bd &lt;- as.Date(\"2002-06-14\")\n  \njacob_bd &lt;- as.Date(\"2002-08-31\")\n\njacob_bd - my_bd\n\nTime difference of 78 days"
  },
  {
    "objectID": "posts/Lab 2/index.html",
    "href": "posts/Lab 2/index.html",
    "title": "Lab 2 - Advanced Data Visualization",
    "section": "",
    "text": "Create a Quarto file for ALL Lab 2 (no separate files for Parts 1 and 2).\n\nMake sure your final file is carefully formatted, so that each analysis is clear and concise.\nBe sure your knitted .html file shows all your source code, including any function definitions."
  },
  {
    "objectID": "posts/Lab 2/index.html#dissecting-a-bad-visualization",
    "href": "posts/Lab 2/index.html#dissecting-a-bad-visualization",
    "title": "Lab 2 - Advanced Data Visualization",
    "section": "Dissecting a Bad Visualization",
    "text": "Dissecting a Bad Visualization\nBelow is an example of a less-than-ideal visualization from the collection linked above. It comes to us from data provided for the Wellcome Global Monitor 2018 report by the Gallup World Poll:\n\n\nWhile there are certainly issues with this image, do your best to tell the story of this graph in words. That is, what is this graph telling you? What do you think the authors meant to convey with it?\n\nThis visualization shows the percentage of people who believe vaccines are safe across different countries, organized by global regions. It reveals significant variation both within and between regions in vaccine confidence. Some regions like Asia show extreme variation (from Japan at ~35% to Bangladesh and India at nearly 100%), while others like the Former Soviet Union show lower overall confidence. The dark vertical lines represent the median values for each region, allowing for regional comparisons. The graph effectively illustrates global vaccine confidence patterns and highlights which countries and regions have higher or lower trust in vaccine safety.\nList the variables that appear to be displayed in this visualization. *Hint: Variables refer to columns in the data.\n\nCountry (categorical)\nRegion (categorical)\nPercentage of people who believe vaccines are safe (quantitative)\n\nNow that you’re versed in the grammar of graphics (e.g., ggplot), list the aesthetics used and which variables are mapped to each.\n\nx-position: Percentage of people who believe vaccines are safe\ny-position: Region (with countries organized vertically within their region)\nColor: Region\nText labels: Country names (for selected countries)\nVertical lines: Regional medians\n\nWhat type of graph would you call this? Meaning, what geom would you use to produce this plot?\n\ngeom_point()\ngeom_vline()\ngeom_text()\n\nProvide at least four problems or changes that would improve this graph. Please format your changes as bullet points!\nSelective labeling issue: Only some countries are labeled, making it impossible to identify many data points. Either label all countries or provide an interactive version where hovering reveals country names.\n\nArbitrary vertical positioning: The vertical placement within regions doesn’t convey any additional information and could be misinterpreted as meaningful.\nMissing confidence intervals: Survey data should include margins of error, especially when comparing countries.\nOvercrowding in certain regions: Some regions (like Sub-Saharan Africa) have many dots clustered together, making individual countries difficult to distinguish.\nNo explanation for country selection: It’s unclear why certain countries are included while others are missing.\nNo context about survey methodology: Information about sample sizes, exact survey questions, and data collection methods would provide important context.\nColor accessibility concerns: Some of the colors used may be difficult to distinguish for people with color vision deficiencies."
  },
  {
    "objectID": "posts/Lab 2/index.html#improving-the-bad-visualization",
    "href": "posts/Lab 2/index.html#improving-the-bad-visualization",
    "title": "Lab 2 - Advanced Data Visualization",
    "section": "Improving the Bad Visualization",
    "text": "Improving the Bad Visualization\nThe data for the Wellcome Global Monitor 2018 report can be downloaded at the following site: https://wellcome.ac.uk/reports/wellcome-global-monitor/2018\n\nThere are two worksheets in the downloaded dataset file. You may need to read them in separately, but you may also just use one if it suffices.\n\n# --- 0. Setup: Load Libraries and Data ---\n\nlibrary(tidyverse)\nlibrary(readxl)\n\nfull_df &lt;- read_excel(\"~/Documents/STAT 541/wgm2018-dataset-crosstabs-all-countries.xlsx\", sheet = 'Full dataset')\n\ndata_dict &lt;- read_excel(\"~/Documents/STAT 541/wgm2018-dataset-crosstabs-all-countries.xlsx\", sheet = 'Data dictionary')\n\n# --- 1. Common Processing: Create Mappings ---\n\n# Define a robust function to parse mappings from the data dictionary\nparse_mapping &lt;- function(mapping_raw) {\n  # Check if mapping_raw is NA or empty\n  if (is.na(mapping_raw) || nchar(trimws(mapping_raw)) == 0) {\n    warning(\"Received empty or NA mapping string.\")\n    return(tibble(code = integer(), name = character()))\n  }\n\n  # Split by comma, potentially handling extra spaces\n  mapping_list &lt;- strsplit(mapping_raw, \",\")[[1]]\n  # Keep only elements containing '=', trim whitespace\n  mapping_list &lt;- trimws(mapping_list[grepl(\"=\", mapping_list)])\n\n  # Split each element by '='\n  split_list &lt;- strsplit(mapping_list, \"=\", fixed = TRUE)\n\n  # Create a tibble, handling potential errors during conversion\n  mapping_df &lt;- tryCatch({\n    tibble(\n      code_raw = sapply(split_list, `[`, 1),\n      name = sapply(split_list, `[`, 2)\n    ) %&gt;%\n      # Attempt to convert code to integer, coercing errors to NA\n      mutate(code = suppressWarnings(as.integer(trimws(code_raw))),\n             name = trimws(name)) %&gt;%\n      # Filter out rows where code conversion failed or name is missing\n      filter(!is.na(code), !is.na(name), name != \"\") %&gt;%\n      select(code, name)\n  }, error = function(e) {\n    warning(\"Error parsing mapping: \", e$message)\n    return(tibble(code = integer(), name = character()))\n  })\n\n  return(mapping_df)\n}\n\n# Create Country Mapping Data Frame\ncountry_mapping_raw &lt;- data_dict %&gt;%\n  filter(`Variable Name` == \"WP5\") %&gt;%\n  pull(`Variable Type & Codes*`)\n# Keep original mapping column names for joining ease, rename later if needed\ncountry_mapping_df &lt;- parse_mapping(country_mapping_raw) # Columns: code, name\n\n# Create Region Mapping Data Frame\nregion_mapping_raw &lt;- data_dict %&gt;%\n  filter(`Variable Name` == \"Regions_Report\") %&gt;%\n  pull(`Variable Type & Codes*`)\n# Keep original mapping column names for joining ease\nregion_mapping_df &lt;- parse_mapping(region_mapping_raw) # Columns: code, name\n\n\n# --- 2. Analysis 1: Vaccine Safety Perception (Q25) ---\n\nvaccine_safety_summary &lt;- full_df %&gt;%\n  # Select necessary columns including the weight 'wgt'\n  select(WP5, Regions_Report, wgt, Q25) %&gt;%\n  # Filter out missing or \"Don't know\" responses for Q25\n  filter(!is.na(Q25) & Q25 != 99) %&gt;%\n  # Create binary indicator: 1 if they agree/strongly agree vaccines are safe\n  mutate(vaccine_safe = ifelse(Q25 %in% c(1, 2), 1, 0)) %&gt;%\n  # Join with mapping tables *before* summarizing\n  # Use suffixes to handle duplicated 'name' columns from mappings\n  left_join(country_mapping_df, by = c(\"WP5\" = \"code\"), suffix = c(\"\", \".country\")) %&gt;%\n  left_join(region_mapping_df, by = c(\"Regions_Report\" = \"code\"), suffix = c(\".country\", \".region\")) %&gt;%\n  # Filter out rows where mapping might have failed (optional but good practice)\n  filter(!is.na(name.country), !is.na(name.region)) %&gt;%\n  # Group by the mapped names (which are now name.country and name.region)\n  group_by(name.country, name.region) %&gt;%\n  # Calculate the weighted percentage, name it as in the original final df\n  summarize(\n    `% Believe Vaccines Safe` = sum(vaccine_safe * wgt, na.rm = TRUE) / sum(wgt, na.rm = TRUE) * 100,\n    .groups = 'drop' # Drop grouping structure after summarizing\n  ) %&gt;%\n  # Rename the grouped columns to match the original 'final_df' names\n  rename(\n      Country = name.country,\n      Region = name.region\n  ) %&gt;%\n  # Select only the final desired columns in the desired order\n  select(Country, Region, `% Believe Vaccines Safe`)\n\n# --- 3. Analysis 2: Child Vaccination Status (Q28) ---\n\nvaccination_status_summary &lt;- full_df %&gt;%\n  # Select necessary columns (Weight 'wgt' wasn't used in original code for this part)\n  select(WP5, Q28) %&gt;%\n  # Keep only valid responses (1 = vaccinated, 2 = not vaccinated)\n  filter(Q28 %in% c(1, 2)) %&gt;%\n  # Join with country mapping *before* summarizing\n  left_join(country_mapping_df, by = c(\"WP5\" = \"code\")) %&gt;% # Adds 'name' column for country\n  # Filter out rows where country mapping failed\n  filter(!is.na(name)) %&gt;%\n  # Create binary indicator for vaccinated status\n  mutate(Vaccinated = if_else(Q28 == 1, 1, 0)) %&gt;%\n  # Group by the mapped Country name (column 'name')\n  group_by(name) %&gt;%\n  # Summarize counts and calculate proportion (unweighted as per original code)\n  # Names generated here match the original 'country_summary'\n  summarize(\n    N_Respondents = n(),\n    N_Vaccinated = sum(Vaccinated),\n    Proportion_Vaccinated = N_Vaccinated / N_Respondents,\n    .groups = \"drop\"\n  ) %&gt;%\n  # Rename the 'name' column to 'Country' to match original variable name\n  rename(Country = name) %&gt;%\n  # Apply specific country name adjustments as in the original code\n  mutate(Country = case_when(\n    Country == \"Bosnia and Herzegovina\" ~ \"Bosnia and Herzegovina\", # No change needed, but included for completeness\n    Country == \"Czech Republic\" ~ \"Czechia\",\n    Country == \"Dominican Republic\" ~ \"Dominican Republic\", # No change\n    Country == \"Eswatini\" ~ \"Eswatini\", # No change\n    Country == \"Ivory Coast\" ~ \"Côte d'Ivoire\",\n    Country == \"Macedonia\" ~ \"North Macedonia\",\n    Country == \"Northern Cyprus\" ~ \"Cyprus\", # Note: Original comment maintained\n    Country == \"Palestinian Territories\" ~ \"Palestine\",\n    Country == \"Republic of Congo\" ~ \"Republic of the Congo\",\n    Country == \"The Gambia\" ~ \"Gambia\",\n    Country == \"United States\" ~ \"United States of America\",\n    TRUE ~ Country # Keep all other names as they are\n  ))\n\n\n# --- 4. Analysis 3: View of Science (ViewOfScience) ---\n\nscience_view_summary &lt;- full_df %&gt;%\n  # Select necessary columns (Weight 'wgt' wasn't used in original code)\n  select(WP5, ViewOfScience) %&gt;%\n  # Keep only valid responses (assuming 1-4 are valid categories)\n  filter(ViewOfScience %in% c(1, 2, 3, 4)) %&gt;%\n  # Join with country mapping *before* summarizing\n  left_join(country_mapping_df, by = c(\"WP5\" = \"code\")) %&gt;% # Adds 'name' column for country\n  # Filter out rows where country mapping failed\n  filter(!is.na(name)) %&gt;%\n  # Create readable labels for the science view categories\n  mutate(\n    ViewOfScience_Label = case_when(\n      ViewOfScience == 1 ~ \"Enthusiast\",\n      ViewOfScience == 2 ~ \"Included\",\n      ViewOfScience == 3 ~ \"Excluded\",\n      ViewOfScience == 4 ~ \"Sceptic\",\n      TRUE ~ NA_character_ # Should not happen due to filter, but safe practice\n    )\n  ) %&gt;%\n  # Filter out any rows where label creation failed (optional)\n  filter(!is.na(ViewOfScience_Label)) %&gt;%\n  # Group by Country (column 'name') and the created label\n  group_by(name, ViewOfScience_Label) %&gt;%\n  # Count occurrences for each group (unweighted as per original code)\n  # Name 'N' matches original\n  summarize(N = n(), .groups = \"drop\") %&gt;%\n   # Rename the country name column *before* the next grouping\n  rename(Country = name) %&gt;%\n  # Group again just by Country to calculate proportions within each country\n  group_by(Country) %&gt;%\n  # Calculate the proportion of each view within the country\n  # Name 'Proportion' matches original\n  mutate(Proportion = N / sum(N)) %&gt;%\n  # Ungroup for a clean final tibble\n  ungroup()\n  # Resulting columns: Country, ViewOfScience_Label, N, Proportion\n  # matching the original 'science_data'\n\n\nImprove the visualization above by either re-creating it with the issues you identified fixed OR by creating a new visualization that you believe tells the same story better.\n\n\nregion_mapping &lt;- c(\n  \"Northern America\" = \"Americas\",\n  \"South America\" = \"Americas\",\n  \"Central America and Mexico\" = \"Americas\",\n  \"Northern Europe\" = \"Europe\",\n  \"Western Europe\" = \"Europe\",\n  \"Southern Europe\" = \"Europe\",\n  \"Eastern Europe\" = \"Europe\",\n  \"North Africa\" = \"Middle East & North Africa\",\n  \"Middle East\" = \"Middle East & North Africa\",\n  \"South Asia\" = \"Asia\",\n  \"Southeast Asia\" = \"Asia\",\n  \"East Asia\" = \"Asia\",\n  \"Western Africa\" = \"Sub-Saharan Africa\",\n  \"Eastern Africa\" = \"Sub-Saharan Africa\",\n  \"Southern Africa\" = \"Sub-Saharan Africa\",\n  \"Central Africa\" = \"Sub-Saharan Africa\",\n  \"Aus/NZ\" = \"Oceania\",\n  \"Central Asia\" = \"Former Soviet Union\",\n  \"Not assigned\" = \"Other\"\n)\n\n# Add broader region to the dataset\nvaccine_safety_summary &lt;- vaccine_safety_summary %&gt;%\n  mutate(BroadRegion = region_mapping[Region])\n\n# Calculate region medians\nregion_stats &lt;- vaccine_safety_summary %&gt;%\n  group_by(BroadRegion) %&gt;%\n  summarise(\n    median_value = median(`% Believe Vaccines Safe`),\n    count = n()\n  ) %&gt;%\n  arrange(desc(median_value))\n\n# Get the order of regions by median value (descending)\nregion_order &lt;- region_stats$BroadRegion\n\n# Identify global extremes (top 5 and bottom 5)\ntop5 &lt;- vaccine_safety_summary %&gt;%\n  arrange(desc(`% Believe Vaccines Safe`)) %&gt;%\n  head(5)\n\nbottom5 &lt;- vaccine_safety_summary %&gt;%\n  arrange(`% Believe Vaccines Safe`) %&gt;%\n  head(5)\n\n# Combine top and bottom into extremes\nextremes &lt;- bind_rows(top5, bottom5)\n\n# Create a new dataset with highlight information\nvaccine_safety_summary &lt;- vaccine_safety_summary %&gt;%\n  mutate(\n    highlighted = Country %in% c(top5$Country, bottom5$Country),\n    point_size = ifelse(highlighted, 3, 1.5),\n    point_alpha = ifelse(highlighted, 1, 0.7)\n  )\n\n# Define region colors\nregion_colors &lt;- c(\n  \"Asia\" = \"#D35400\",\n  \"Middle East & North Africa\" = \"#3498DB\",\n  \"Sub-Saharan Africa\" = \"#27AE60\",\n  \"Americas\" = \"#E67E22\",\n  \"Europe\" = \"#7F8C8D\",\n  \"Oceania\" = \"#16A085\",\n  \"Former Soviet Union\" = \"#8E44AD\",\n  \"Other\" = \"#95A5A6\"\n)\n\n# Create the plot\np &lt;- ggplot() +\n  # Add horizontal lines for each region\n  geom_segment(\n    data = region_stats,\n    aes(\n      x = 30, \n      xend = 100,\n      y = factor(BroadRegion, levels = region_order),\n      yend = factor(BroadRegion, levels = region_order),\n      color = BroadRegion\n    ),\n    alpha = 0.3,\n    size = 2\n  ) +\n  # Add points for each country\n  geom_point(\n    data = vaccine_safety_summary,\n    aes(\n      x = `% Believe Vaccines Safe`,\n      y = factor(BroadRegion, levels = region_order),\n      color = BroadRegion,\n      size = point_size,\n      alpha = point_alpha\n    )\n  ) +\n  # Add vertical lines for region medians\n  geom_segment(\n    data = region_stats,\n    aes(\n      x = median_value,\n      xend = median_value,\n      y = as.numeric(factor(BroadRegion, levels = region_order)) - 0.2,\n      yend = as.numeric(factor(BroadRegion, levels = region_order)) + 0.2,\n      color = BroadRegion\n    ),\n    size = 1.5\n  ) +\n  # Add median value labels\n  geom_text(\n    data = region_stats,\n    aes(\n      x = median_value,\n      y = factor(BroadRegion, levels = region_order),\n      color = BroadRegion,\n      label = paste0(\"Median: \", round(median_value, 1))\n    ),\n    vjust = -1.5,\n    size = 3.5\n  ) +\n  # Add country labels for extremes\n  geom_text(\n    data = extremes,\n    aes(\n      x = `% Believe Vaccines Safe`,\n      y = factor(BroadRegion, levels = region_order),\n      label = Country\n    ),\n    hjust = -0.2,\n    vjust = 1.2,\n    size = 3,\n    check_overlap = TRUE\n  ) +\n  # Set scale and appearance\n  scale_x_continuous(\n    limits = c(30, 100),\n    breaks = seq(30, 100, by = 10),\n    labels = function(x) paste0(x, \"%\"),\n    expand = expansion(mult = c(0.01, 0.1))\n  ) +\n  scale_color_manual(values = region_colors) +\n  scale_size_identity() +\n  scale_alpha_identity() +\n  # Customize theme\n  theme_minimal() +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.grid.major.y = element_blank(),\n    legend.position = \"none\",\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5, size = 12),\n    plot.caption = element_text(hjust = 0.5, size = 8),\n    axis.title.y = element_blank()\n  ) +\n  # Add labels\n  labs(\n    title = \"Percentage of people who believe vaccines are safe\",\n    subtitle = \"By global region (2018)\",\n    x = NULL,\n    caption = \"Source: Wellcome Global Monitor, part of the Gallup World Poll 2018\"\n  )\n\n# Add a text annotation for global extremes\np &lt;- p + \n  annotate(\n    \"text\", \n    x = 30, \n    y = 0.55, \n    label = \"Global extremes are highlighted with larger points\", \n    hjust = 0, \n    size = 3.2,\n    fontface = \"italic\"\n  )\n\n# Print the plot\np"
  },
  {
    "objectID": "posts/Lab 2/index.html#second-data-visualization-improvement",
    "href": "posts/Lab 2/index.html#second-data-visualization-improvement",
    "title": "Lab 2 - Advanced Data Visualization",
    "section": "Second Data Visualization Improvement",
    "text": "Second Data Visualization Improvement\nFor this second plot, you must select a plot that uses maps so you can demonstrate your proficiency with the leaflet package!\n\nSelect a data visualization in the report that you think could be improved. Be sure to cite both the page number and figure title. Do your best to tell the story of this graph in words. That is, what is this graph telling you? What do you think the authors meant to convey with it?\n\nThis map shows the global distribution of childhood vaccination rates based on self-reported data. It displays the percentage of people who answered “yes” when asked if their children had received vaccines for diseases like diphtheria, polio, or tetanus. The visualization reveals that most countries have relatively high vaccination rates (with many in the 80-95%+ range), though there are notable regional variations and some countries with lower rates or missing data.\nList the variables that appear to be displayed in this visualization.\nGeographic location (countries/regions of the world)\nPercentage of people reporting their children have been vaccinated (categorical ranges: less than 70%, 70-79%, 80-89%, 90-94%, 95% and higher)\nSurvey response status (surveyed vs. not surveyed)\nNow that you’re versed in the grammar of graphics (ggplot), list the aesthetics used and which variables are specified for each.\ncolor: Mapped to vaccination percentage ranges (color gradient from light to dark green)\nx and y coordinates: Mapped to geographic coordinates (latitude/longitude)\nboundaries/shapes: Country borders\nWhat type of graph would you call this?\nThis is a choropleth map - a thematic map where geographic areas are colored or shaded according to a statistical variable\nList all of the problems or things you would improve about this graph.\nThe color scheme makes it difficult to distinguish between adjacent categories (especially the various shades of green)\nWhite is used both for “less than 70%” and “countries not surveyed,” creating potential confusion\nNo specific country labels, making it difficult to identify specific nations\nNo source citation for the data\nThe superscript “38” in the question suggests a footnote that isn’t visible\nNo indication of when this data was collected (year/timeframe missing)\nThe color categories are uneven (70-79%, 80-89%, 90-94%, 95%+), which can bias interpretation\nNo indication of data uncertainty or sample sizes for each country\nNo explanation for missing data (countries not surveyed)\nThe title focuses on “proportions of people” but the map shows percentages\nImprove the visualization above by either re-creating it with the issues you identified fixed OR by creating a new visualization that you believe tells the same story better.\n\n\nlibrary(leaflet)\nlibrary(rnaturalearth)\nlibrary(rnaturalearthdata)\nlibrary(sf)\n\n\n# 1. Get world map shapefile\nworld &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# 2. Join the vaccination data to the world map\nworld_vax &lt;- world %&gt;%\n  left_join(vaccination_status_summary, by = c(\"name\" = \"Country\"))\n\n# 3. Create popup text\nworld_vax &lt;- world_vax %&gt;%\n  mutate(\n    popup_text = paste0(\n      \"&lt;strong&gt;Country: &lt;/strong&gt;\", name, \"&lt;br&gt;\",\n      \"&lt;strong&gt;Percent Vaccinated: &lt;/strong&gt;\", \n      ifelse(!is.na(Proportion_Vaccinated), scales::percent(Proportion_Vaccinated, accuracy = 0.1), \"No data\")\n    )\n  )\n\n# Create the color palette function explicitly\n# We define the domain so the palette function knows the range of values\npal &lt;- colorNumeric(\n  palette = \"YlGnBu\",\n  domain = world_vax$Proportion_Vaccinated,\n  na.color = \"#CCCCCC\"\n)\n\n# 4. Create Leaflet map - Single World, Zoomed In Slightly\nleaflet(data = world_vax) %&gt;%  # Removed the leafletOptions() that disabled zoom/pan\n  addProviderTiles(\n    providers$CartoDB.Positron,\n    options = providerTileOptions(noWrap = TRUE) # Add this option to prevent repeating world\n   ) %&gt;%\n  setView(lng = 0, lat = 30, zoom = 2) %&gt;% # Set initial center and zoom level (adjust as needed)\n  addPolygons(\n    fillColor = ~pal(Proportion_Vaccinated), # Use the pre-defined palette function\n    weight = 1,\n    opacity = 1,\n    color = \"white\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 3,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE\n    ),\n    label = lapply(world_vax$popup_text, htmltools::HTML),\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\"\n    )\n  ) %&gt;%\n  # Add the legend to the map\n  addLegend(\n    pal = pal,                       # Use the same palette function\n    values = ~Proportion_Vaccinated, # Use the data values the colors are based on\n    opacity = 0.7,                   # Match the fill opacity used in addPolygons\n    title = \"Percent Vaccinated\", # Set a title for the legend\n    position = \"bottomright\"         # Specify legend position\n  )\n\n\n\n\n  # Optional: Add the title control back if desired\n  # %&gt;% addControl(html = map_title, position = \"topleft\")"
  },
  {
    "objectID": "posts/Lab 2/index.html#third-data-visualization-improvement",
    "href": "posts/Lab 2/index.html#third-data-visualization-improvement",
    "title": "Lab 2 - Advanced Data Visualization",
    "section": "Third Data Visualization Improvement",
    "text": "Third Data Visualization Improvement\nFor this third plot, you must use one of the other ggplot2 extension packages mentioned this week (e.g., gganimate, plotly, patchwork, cowplot).\n\nSelect a data visualization in the report that you think could be improved. Be sure to cite both the page number and figure title. Do your best to tell the story of this graph in words. That is, what is this graph telling you? What do you think the authors meant to convey with it?\n\nThis visualization shows how people perceive the benefits of science at both personal and societal levels, dividing respondents into four distinct groups:\nEnthusiasts (38%): Believe science benefits both society and individuals\nThe Included (29%): Believe science benefits individuals but not necessarily society as a whole\nThe Excluded (11%): Believe science benefits society but not individuals in their everyday lives\nSkeptics (8%): Don’t see significant benefits from science at either level\nThe graph reveals that while most people (67% - Enthusiasts + The Included) believe science benefits individuals, there’s more division about its societal benefits. Additionally, 15% of respondents didn’t complete both questions and weren’t categorized.\nList the variables that appear to be displayed in this visualization.\nViews on extent to which science benefits society\nViews on extent to which science benefits people normally\nResponse type categories\nPercentage of respondents in each category\nNow that you’re versed in the grammar of graphics (ggplot), list the aesthetics used and which variables are specified for each.\nx-position: Science benefits to individuals\ny-position: Science benefits to society\nfill/color: Response type category\nsize: Percentage of respondents\nlabel: Category name and percentage\nWhat type of graph would you call this?\n\nThis is a quadrant bubble chart or quadrant scatter plot with sized points.\nList all of the problems or things you would improve about this graph.\n\nAxes lack clear scales (what values define “high” vs “low” benefit?)\nNo explanation of how quadrants were defined\nThe 15% non-respondents could be visually represented\nNo information about survey methodology or sample size\nColor scheme lacks logical pattern (why are “Included” and “Excluded” different colors?)\nBubble sizes may not accurately represent proportional differences\nNo source information provided\nQuadrant labels could better explain what each position represents\nDividing lines between quadrants are faint\nImprove the visualization above by either re-creating it with the issues you identified fixed OR by creating a new visualization that you believe tells the same story better.\n\n\n# Load necessary libraries\nlibrary(patchwork)  # For combining multiple plots\n\n\n# Calculate global averages for each category\nglobal_stats &lt;- science_view_summary %&gt;%\n  group_by(ViewOfScience_Label) %&gt;%\n  summarize(\n    total_n = sum(N),\n    weighted_prop = sum(N * Proportion) / sum(N)\n  )\n\n# Define quadrant positions and characteristics for each category\ncategories &lt;- tibble(\n  ViewOfScience_Label = c(\"Enthusiast\", \"Included\", \"Excluded\", \"Sceptic\"),\n  x_pos = c(0.75, 0.75, 0.25, 0.25), # x position in quadrant (right/left)\n  y_pos = c(0.25, 0.75, 0.25, 0.75), # y position in quadrant (top/bottom)\n  description = c(\n    \"Believe science benefits both society and individuals\",\n    \"Believe science benefits individuals but not necessarily society\",\n    \"Believe science benefits society but not individuals in their lives\",\n    \"Don't see significant benefits from science at either level\"\n  ),\n  color = c(\"#FFD166\", \"#06D6A0\", \"#73D2DE\", \"#FFC5D3\"), # Gold, Green, Turquoise, Dark Blue\n  label_text = c(\"Enthusiasts\", \"The Included\", \"The Excluded\", \"Sceptics\")\n)\n\n# Join the category info with the global stats\nplot_data &lt;- global_stats %&gt;%\n  left_join(categories, by = \"ViewOfScience_Label\") %&gt;%\n  mutate(percent_label = paste0(round(weighted_prop * 100, 1), \"%\"))\n\n# Total sample size\ntotal_sample &lt;- sum(plot_data$total_n)\n\n# PLOT 1: Main Quadrant Visualization\np1 &lt;- ggplot() +\n  # Add quadrant dividing lines\n  geom_vline(xintercept = 0.5, linetype = \"dashed\", color = \"gray50\", size = 1) +\n  geom_hline(yintercept = 0.5, linetype = \"dashed\", color = \"gray50\", size = 1) +\n  \n  # Add bubbles for each category\n  geom_point(data = plot_data, \n             aes(x = x_pos, y = y_pos, size = weighted_prop, fill = ViewOfScience_Label),\n             shape = 21, color = \"white\", alpha = 0.9) +\n  \n  # Add percentage labels inside bubbles\n  geom_text(data = plot_data,\n            aes(x = x_pos, y = y_pos, label = percent_label),\n            color = \"white\", fontface = \"bold\", size = 4) +\n  \n  # Add category names above/below bubbles\n  geom_text(data = plot_data,\n            aes(x = x_pos, y = y_pos, label = label_text),\n            vjust = -2.5, fontface = \"bold\", size = 3.5) +\n  \n  # Set scales\n  scale_size_continuous(range = c(20, 40)) +\n  scale_fill_manual(values = setNames(plot_data$color, plot_data$ViewOfScience_Label)) +\n  \n  # Set axis labels\n  labs(\n    x = \"Perceived Benefits to Individuals\",\n    y = \"Perceived Benefits to Society\"\n  ) +\n  \n  # Add axis direction indicators\n  annotate(\"text\", x = c(0.1, 0.9), y = c(0.05, 0.05), \n           label = c(\"Lower\", \"Higher\"), size = 3.5) +\n  annotate(\"text\", x = c(0.05, 0.05), y = c(0.1, 0.9), \n           label = c(\"Lower\", \"Higher\"), size = 3.5, angle = 90) +\n  \n  # Clean up the theme\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title = element_text(size = 12, face = \"bold\"),\n    plot.margin = margin(20, 20, 20, 20)\n  ) +\n  coord_cartesian(xlim = c(0, 1), ylim = c(0, 1))\n\n# PLOT 2: Category Explanations\nexplanation_df &lt;- tibble(\n  category = plot_data$label_text,\n  description = plot_data$description,\n  percentage = plot_data$percent_label,\n  color = plot_data$color\n)\n\np2 &lt;- ggplot(explanation_df, aes(y = 4:1)) +\n  geom_segment(aes(x = 0, xend = 0.9, yend = 4:1), color = \"gray80\") +\n  geom_point(aes(x = 0, fill = category), size = 5, shape = 21, color = \"white\") +\n  geom_text(aes(x = 0.1, label = paste0(category, \" (\", percentage, \")\")), \n            hjust = 0, fontface = \"bold\", size = 3.5) +\n  geom_text(aes(x = 0.1, label = description), \n            hjust = 0, vjust = 1.8, size = 3) +\n  scale_fill_manual(values = setNames(explanation_df$color, explanation_df$category)) +\n  labs(title = \"Understanding the Categories\") +\n  theme_void() +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0),\n    plot.margin = margin(10, 10, 10, 10)\n  ) +\n  coord_cartesian(xlim = c(-0.1, 4))\n\n# PLOT 3: Selected Countries Comparison\n# Select diverse countries to compare\nselected_countries &lt;- c(\"United States\", \"China\", \"Germany\", \"India\", \"Brazil\", \"Nigeria\")\n\n# Filter for selected countries\ncountry_data &lt;- science_view_summary %&gt;%\n  filter(Country %in% selected_countries) %&gt;%\n  left_join(categories %&gt;% select(ViewOfScience_Label, color, label_text), by = \"ViewOfScience_Label\") %&gt;%\n  mutate(label_short = gsub(\"s$\", \"\", label_text))  # Shorter labels for the chart\n\np3 &lt;- ggplot(country_data, aes(x = label_short, y = Proportion, fill = ViewOfScience_Label)) +\n  geom_bar(stat = \"identity\", width = 0.7) +\n  geom_text(aes(label = paste0(round(Proportion * 100, 0), \"%\")), \n            position = position_stack(vjust = 0.5), \n            color = \"white\", size = 2.8, fontface = \"bold\") +\n  facet_wrap(~Country, nrow = 2) +\n  scale_fill_manual(values = setNames(categories$color, categories$ViewOfScience_Label)) +\n  scale_y_continuous(labels = scales::percent, limits = c(0, 1)) +\n  labs(\n    title = \"Country Comparisons\",\n    x = NULL,\n    y = \"Percentage\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.minor = element_blank(),\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 8),\n    axis.text.y = element_text(size = 8),\n    strip.text = element_text(face = \"bold\", size = 10),\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5)\n  )\n\n# Combine plots using patchwork\ncombined_plot &lt;- (p1) / (p2 + p3) +\n  plot_layout(heights = c(1.2, 1)) +\n  plot_annotation(\n    title = \"How People Feel About the Benefits of Science\",\n    subtitle = \"Combined view of perceived benefits at personal and societal levels\",\n    caption = paste0(\"Global survey of 144 countries (n=\", format(total_sample, big.mark=\",\"), \")\\n\",\n                    \"Note: ~15% of people did not answer one or both questions and were not included in the analysis.\"),\n    theme = theme(\n      plot.title = element_text(size = 18, face = \"bold\", hjust = 0.5),\n      plot.subtitle = element_text(size = 14, hjust = 0.5),\n      plot.caption = element_text(size = 10, hjust = 1)\n    )\n  )\n\ncombined_plot"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]