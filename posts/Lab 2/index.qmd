---
title: "Lab 2 - Advanced Data Visualization"
description: "Improve bad visualizations"
author:
  - name: Liam Quach
    url: https://LiamQuach.github.io/
    affiliation: Master of Science in Statistics @ Cal Poly
date: 05-04-2025
categories: [Quarto, R] # self-defined categories
draft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
execute: 
  echo: true
  warning: false
format: 
  html: 
    page-layout: full
---

# Instructions

**Create a Quarto file for ALL Lab 2 (no separate files for Parts 1 and 2).**

-   Make sure your final file is carefully formatted, so that each analysis is clear and concise.
-   Be sure your knitted `.html` file shows **all** your source code, including any function definitions.

# Part One: Identifying Bad Visualizations

If you happen to be bored and looking for a sensible chuckle, you should check out these [Bad Visualisations](https://badvisualisations.tumblr.com/). Looking through these is also a good exercise in cataloging what makes a visualization good or bad.

## Dissecting a Bad Visualization

Below is an example of a less-than-ideal visualization from the collection linked above. It comes to us from data provided for the [Wellcome Global Monitor 2018 report](https://wellcome.ac.uk/reports/wellcome-global-monitor/2018) by the Gallup World Poll:

![](image/bad-wellcome-graph.jpg)

1.  While there are certainly issues with this image, do your best to tell the story of this graph in words. That is, what is this graph telling you? What do you think the authors meant to convey with it?\
    \
    This visualization shows the percentage of people who believe vaccines are safe across different countries, organized by global regions. It reveals significant variation both within and between regions in vaccine confidence. Some regions like Asia show extreme variation (from Japan at \~35% to Bangladesh and India at nearly 100%), while others like the Former Soviet Union show lower overall confidence. The dark vertical lines represent the median values for each region, allowing for regional comparisons. The graph effectively illustrates global vaccine confidence patterns and highlights which countries and regions have higher or lower trust in vaccine safety.

2.  List the variables that appear to be displayed in this visualization. \*Hint: Variables refer to columns in the data.

    -   Country (categorical)

    -   Region (categorical)

    -   Percentage of people who believe vaccines are safe (quantitative)

3.  Now that you're versed in the grammar of graphics (e.g., `ggplot`), list the *aesthetics* used and which *variables* are mapped to each.

    -   x-position: Percentage of people who believe vaccines are safe

    -   y-position: Region (with countries organized vertically within their region)

    -   Color: Region

    -   Text labels: Country names (for selected countries)

    -   Vertical lines: Regional medians

4.  What type of graph would you call this? Meaning, what `geom` would you use to produce this plot?

    -   `geom_point()`

    -   `geom_vline()`

    -   `geom_text()`

5.  Provide at least four problems or changes that would improve this graph. *Please format your changes as bullet points!\
    ***Selective labeling issue**: Only some countries are labeled, making it impossible to identify many data points. Either label all countries or provide an interactive version where hovering reveals country names.

    -   **Arbitrary vertical positioning**: The vertical placement within regions doesn't convey any additional information and could be misinterpreted as meaningful.

    -   **Missing confidence intervals**: Survey data should include margins of error, especially when comparing countries.

    -   **Overcrowding in certain regions**: Some regions (like Sub-Saharan Africa) have many dots clustered together, making individual countries difficult to distinguish.

    -   **No explanation for country selection**: It's unclear why certain countries are included while others are missing.

    -   **No context about survey methodology**: Information about sample sizes, exact survey questions, and data collection methods would provide important context.

    -   **Color accessibility concerns**: Some of the colors used may be difficult to distinguish for people with color vision deficiencies.

## Improving the Bad Visualization

The data for the Wellcome Global Monitor 2018 report can be downloaded at the following site: [https://wellcome.ac.uk/reports/wellcome-global-monitor/2018](https://wellcome.org/sites/default/files/wgm2018-dataset-crosstabs-all-countries.xlsx)

<!-- at the "Dataset and crosstabs for all countries" link on the right side of the page-->

There are two worksheets in the downloaded dataset file. You may need to read them in separately, but you may also just use one if it suffices.

```{r}
#| label: read-in-wellcome-data
# --- 0. Setup: Load Libraries and Data ---

library(tidyverse)
library(readxl)

full_df <- read_excel("~/Documents/STAT 541/wgm2018-dataset-crosstabs-all-countries.xlsx", sheet = 'Full dataset')

data_dict <- read_excel("~/Documents/STAT 541/wgm2018-dataset-crosstabs-all-countries.xlsx", sheet = 'Data dictionary')

# --- 1. Common Processing: Create Mappings ---

# Define a robust function to parse mappings from the data dictionary
parse_mapping <- function(mapping_raw) {
  # Check if mapping_raw is NA or empty
  if (is.na(mapping_raw) || nchar(trimws(mapping_raw)) == 0) {
    warning("Received empty or NA mapping string.")
    return(tibble(code = integer(), name = character()))
  }

  # Split by comma, potentially handling extra spaces
  mapping_list <- strsplit(mapping_raw, ",")[[1]]
  # Keep only elements containing '=', trim whitespace
  mapping_list <- trimws(mapping_list[grepl("=", mapping_list)])

  # Split each element by '='
  split_list <- strsplit(mapping_list, "=", fixed = TRUE)

  # Create a tibble, handling potential errors during conversion
  mapping_df <- tryCatch({
    tibble(
      code_raw = sapply(split_list, `[`, 1),
      name = sapply(split_list, `[`, 2)
    ) %>%
      # Attempt to convert code to integer, coercing errors to NA
      mutate(code = suppressWarnings(as.integer(trimws(code_raw))),
             name = trimws(name)) %>%
      # Filter out rows where code conversion failed or name is missing
      filter(!is.na(code), !is.na(name), name != "") %>%
      select(code, name)
  }, error = function(e) {
    warning("Error parsing mapping: ", e$message)
    return(tibble(code = integer(), name = character()))
  })

  return(mapping_df)
}

# Create Country Mapping Data Frame
country_mapping_raw <- data_dict %>%
  filter(`Variable Name` == "WP5") %>%
  pull(`Variable Type & Codes*`)
# Keep original mapping column names for joining ease, rename later if needed
country_mapping_df <- parse_mapping(country_mapping_raw) # Columns: code, name

# Create Region Mapping Data Frame
region_mapping_raw <- data_dict %>%
  filter(`Variable Name` == "Regions_Report") %>%
  pull(`Variable Type & Codes*`)
# Keep original mapping column names for joining ease
region_mapping_df <- parse_mapping(region_mapping_raw) # Columns: code, name


# --- 2. Analysis 1: Vaccine Safety Perception (Q25) ---

vaccine_safety_summary <- full_df %>%
  # Select necessary columns including the weight 'wgt'
  select(WP5, Regions_Report, wgt, Q25) %>%
  # Filter out missing or "Don't know" responses for Q25
  filter(!is.na(Q25) & Q25 != 99) %>%
  # Create binary indicator: 1 if they agree/strongly agree vaccines are safe
  mutate(vaccine_safe = ifelse(Q25 %in% c(1, 2), 1, 0)) %>%
  # Join with mapping tables *before* summarizing
  # Use suffixes to handle duplicated 'name' columns from mappings
  left_join(country_mapping_df, by = c("WP5" = "code"), suffix = c("", ".country")) %>%
  left_join(region_mapping_df, by = c("Regions_Report" = "code"), suffix = c(".country", ".region")) %>%
  # Filter out rows where mapping might have failed (optional but good practice)
  filter(!is.na(name.country), !is.na(name.region)) %>%
  # Group by the mapped names (which are now name.country and name.region)
  group_by(name.country, name.region) %>%
  # Calculate the weighted percentage, name it as in the original final df
  summarize(
    `% Believe Vaccines Safe` = sum(vaccine_safe * wgt, na.rm = TRUE) / sum(wgt, na.rm = TRUE) * 100,
    .groups = 'drop' # Drop grouping structure after summarizing
  ) %>%
  # Rename the grouped columns to match the original 'final_df' names
  rename(
      Country = name.country,
      Region = name.region
  ) %>%
  # Select only the final desired columns in the desired order
  select(Country, Region, `% Believe Vaccines Safe`)

# --- 3. Analysis 2: Child Vaccination Status (Q28) ---

vaccination_status_summary <- full_df %>%
  # Select necessary columns (Weight 'wgt' wasn't used in original code for this part)
  select(WP5, Q28) %>%
  # Keep only valid responses (1 = vaccinated, 2 = not vaccinated)
  filter(Q28 %in% c(1, 2)) %>%
  # Join with country mapping *before* summarizing
  left_join(country_mapping_df, by = c("WP5" = "code")) %>% # Adds 'name' column for country
  # Filter out rows where country mapping failed
  filter(!is.na(name)) %>%
  # Create binary indicator for vaccinated status
  mutate(Vaccinated = if_else(Q28 == 1, 1, 0)) %>%
  # Group by the mapped Country name (column 'name')
  group_by(name) %>%
  # Summarize counts and calculate proportion (unweighted as per original code)
  # Names generated here match the original 'country_summary'
  summarize(
    N_Respondents = n(),
    N_Vaccinated = sum(Vaccinated),
    Proportion_Vaccinated = N_Vaccinated / N_Respondents,
    .groups = "drop"
  ) %>%
  # Rename the 'name' column to 'Country' to match original variable name
  rename(Country = name) %>%
  # Apply specific country name adjustments as in the original code
  mutate(Country = case_when(
    Country == "Bosnia and Herzegovina" ~ "Bosnia and Herzegovina", # No change needed, but included for completeness
    Country == "Czech Republic" ~ "Czechia",
    Country == "Dominican Republic" ~ "Dominican Republic", # No change
    Country == "Eswatini" ~ "Eswatini", # No change
    Country == "Ivory Coast" ~ "Côte d'Ivoire",
    Country == "Macedonia" ~ "North Macedonia",
    Country == "Northern Cyprus" ~ "Cyprus", # Note: Original comment maintained
    Country == "Palestinian Territories" ~ "Palestine",
    Country == "Republic of Congo" ~ "Republic of the Congo",
    Country == "The Gambia" ~ "Gambia",
    Country == "United States" ~ "United States of America",
    TRUE ~ Country # Keep all other names as they are
  ))


# --- 4. Analysis 3: View of Science (ViewOfScience) ---

science_view_summary <- full_df %>%
  # Select necessary columns (Weight 'wgt' wasn't used in original code)
  select(WP5, ViewOfScience) %>%
  # Keep only valid responses (assuming 1-4 are valid categories)
  filter(ViewOfScience %in% c(1, 2, 3, 4)) %>%
  # Join with country mapping *before* summarizing
  left_join(country_mapping_df, by = c("WP5" = "code")) %>% # Adds 'name' column for country
  # Filter out rows where country mapping failed
  filter(!is.na(name)) %>%
  # Create readable labels for the science view categories
  mutate(
    ViewOfScience_Label = case_when(
      ViewOfScience == 1 ~ "Enthusiast",
      ViewOfScience == 2 ~ "Included",
      ViewOfScience == 3 ~ "Excluded",
      ViewOfScience == 4 ~ "Sceptic",
      TRUE ~ NA_character_ # Should not happen due to filter, but safe practice
    )
  ) %>%
  # Filter out any rows where label creation failed (optional)
  filter(!is.na(ViewOfScience_Label)) %>%
  # Group by Country (column 'name') and the created label
  group_by(name, ViewOfScience_Label) %>%
  # Count occurrences for each group (unweighted as per original code)
  # Name 'N' matches original
  summarize(N = n(), .groups = "drop") %>%
   # Rename the country name column *before* the next grouping
  rename(Country = name) %>%
  # Group again just by Country to calculate proportions within each country
  group_by(Country) %>%
  # Calculate the proportion of each view within the country
  # Name 'Proportion' matches original
  mutate(Proportion = N / sum(N)) %>%
  # Ungroup for a clean final tibble
  ungroup()
  # Resulting columns: Country, ViewOfScience_Label, N, Proportion
  # matching the original 'science_data'
```

6.  Improve the visualization above by either re-creating it with the issues you identified fixed OR by creating a new visualization that you believe tells the same story better.

```{r}
#| label: new-and-improved-visualization
#| fig-width: 9
#| fig-align: center

region_mapping <- c(
  "Northern America" = "Americas",
  "South America" = "Americas",
  "Central America and Mexico" = "Americas",
  "Northern Europe" = "Europe",
  "Western Europe" = "Europe",
  "Southern Europe" = "Europe",
  "Eastern Europe" = "Europe",
  "North Africa" = "Middle East & North Africa",
  "Middle East" = "Middle East & North Africa",
  "South Asia" = "Asia",
  "Southeast Asia" = "Asia",
  "East Asia" = "Asia",
  "Western Africa" = "Sub-Saharan Africa",
  "Eastern Africa" = "Sub-Saharan Africa",
  "Southern Africa" = "Sub-Saharan Africa",
  "Central Africa" = "Sub-Saharan Africa",
  "Aus/NZ" = "Oceania",
  "Central Asia" = "Former Soviet Union",
  "Not assigned" = "Other"
)

# Add broader region to the dataset
vaccine_safety_summary <- vaccine_safety_summary %>%
  mutate(BroadRegion = region_mapping[Region])

# Calculate region medians
region_stats <- vaccine_safety_summary %>%
  group_by(BroadRegion) %>%
  summarise(
    median_value = median(`% Believe Vaccines Safe`),
    count = n()
  ) %>%
  arrange(desc(median_value))

# Get the order of regions by median value (descending)
region_order <- region_stats$BroadRegion

# Identify global extremes (top 5 and bottom 5)
top5 <- vaccine_safety_summary %>%
  arrange(desc(`% Believe Vaccines Safe`)) %>%
  head(5)

bottom5 <- vaccine_safety_summary %>%
  arrange(`% Believe Vaccines Safe`) %>%
  head(5)

# Combine top and bottom into extremes
extremes <- bind_rows(top5, bottom5)

# Create a new dataset with highlight information
vaccine_safety_summary <- vaccine_safety_summary %>%
  mutate(
    highlighted = Country %in% c(top5$Country, bottom5$Country),
    point_size = ifelse(highlighted, 3, 1.5),
    point_alpha = ifelse(highlighted, 1, 0.7)
  )

# Define region colors
region_colors <- c(
  "Asia" = "#D35400",
  "Middle East & North Africa" = "#3498DB",
  "Sub-Saharan Africa" = "#27AE60",
  "Americas" = "#E67E22",
  "Europe" = "#7F8C8D",
  "Oceania" = "#16A085",
  "Former Soviet Union" = "#8E44AD",
  "Other" = "#95A5A6"
)

# Create the plot
p <- ggplot() +
  # Add horizontal lines for each region
  geom_segment(
    data = region_stats,
    aes(
      x = 30, 
      xend = 100,
      y = factor(BroadRegion, levels = region_order),
      yend = factor(BroadRegion, levels = region_order),
      color = BroadRegion
    ),
    alpha = 0.3,
    size = 2
  ) +
  # Add points for each country
  geom_point(
    data = vaccine_safety_summary,
    aes(
      x = `% Believe Vaccines Safe`,
      y = factor(BroadRegion, levels = region_order),
      color = BroadRegion,
      size = point_size,
      alpha = point_alpha
    )
  ) +
  # Add vertical lines for region medians
  geom_segment(
    data = region_stats,
    aes(
      x = median_value,
      xend = median_value,
      y = as.numeric(factor(BroadRegion, levels = region_order)) - 0.2,
      yend = as.numeric(factor(BroadRegion, levels = region_order)) + 0.2,
      color = BroadRegion
    ),
    size = 1.5
  ) +
  # Add median value labels
  geom_text(
    data = region_stats,
    aes(
      x = median_value,
      y = factor(BroadRegion, levels = region_order),
      color = BroadRegion,
      label = paste0("Median: ", round(median_value, 1))
    ),
    vjust = -1.5,
    size = 3.5
  ) +
  # Add country labels for extremes
  geom_text(
    data = extremes,
    aes(
      x = `% Believe Vaccines Safe`,
      y = factor(BroadRegion, levels = region_order),
      label = Country
    ),
    hjust = -0.2,
    vjust = 1.2,
    size = 3,
    check_overlap = TRUE
  ) +
  # Set scale and appearance
  scale_x_continuous(
    limits = c(30, 100),
    breaks = seq(30, 100, by = 10),
    labels = function(x) paste0(x, "%"),
    expand = expansion(mult = c(0.01, 0.1))
  ) +
  scale_color_manual(values = region_colors) +
  scale_size_identity() +
  scale_alpha_identity() +
  # Customize theme
  theme_minimal() +
  theme(
    panel.grid.minor = element_blank(),
    panel.grid.major.y = element_blank(),
    legend.position = "none",
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    plot.caption = element_text(hjust = 0.5, size = 8),
    axis.title.y = element_blank()
  ) +
  # Add labels
  labs(
    title = "Percentage of people who believe vaccines are safe",
    subtitle = "By global region (2018)",
    x = NULL,
    caption = "Source: Wellcome Global Monitor, part of the Gallup World Poll 2018"
  )

# Add a text annotation for global extremes
p <- p + 
  annotate(
    "text", 
    x = 30, 
    y = 0.55, 
    label = "Global extremes are highlighted with larger points", 
    hjust = 0, 
    size = 3.2,
    fontface = "italic"
  )

# Print the plot
p

       
```

# Part Two: Broad Visualization Improvement

The full Wellcome Global Monitor 2018 report can be found here: <https://wellcome.ac.uk/sites/default/files/wellcome-global-monitor-2018.pdf>. Surprisingly, the visualization above does not appear in the report despite the citation in the bottom corner of the image!

## Second Data Visualization Improvement

**For this second plot, you must select a plot that uses maps so you can demonstrate your proficiency with the `leaflet` package!**

7.  Select a data visualization in the report that you think could be improved. Be sure to cite both the page number and figure title. Do your best to tell the story of this graph in words. That is, what is this graph telling you? What do you think the authors meant to convey with it?\
    ![](images/clipboard-1489521399.png)

    This map shows the global distribution of childhood vaccination rates based on self-reported data. It displays the percentage of people who answered "yes" when asked if their children had received vaccines for diseases like diphtheria, polio, or tetanus. The visualization reveals that most countries have relatively high vaccination rates (with many in the 80-95%+ range), though there are notable regional variations and some countries with lower rates or missing data.

8.  List the variables that appear to be displayed in this visualization.\
    Geographic location (countries/regions of the world)

    Percentage of people reporting their children have been vaccinated (categorical ranges: less than 70%, 70-79%, 80-89%, 90-94%, 95% and higher)

    Survey response status (surveyed vs. not surveyed)

9.  Now that you're versed in the grammar of graphics (ggplot), list the aesthetics used and which variables are specified for each.\
    color: Mapped to vaccination percentage ranges (color gradient from light to dark green)

    x and y coordinates: Mapped to geographic coordinates (latitude/longitude)

    boundaries/shapes: Country borders

10. What type of graph would you call this?\
    This is a choropleth map - a thematic map where geographic areas are colored or shaded according to a statistical variable

11. List all of the problems or things you would improve about this graph.\
    The color scheme makes it difficult to distinguish between adjacent categories (especially the various shades of green)

    White is used both for "less than 70%" and "countries not surveyed," creating potential confusion

    No specific country labels, making it difficult to identify specific nations

    No source citation for the data

    The superscript "38" in the question suggests a footnote that isn't visible

    No indication of when this data was collected (year/timeframe missing)

    The color categories are uneven (70-79%, 80-89%, 90-94%, 95%+), which can bias interpretation

    No indication of data uncertainty or sample sizes for each country

    No explanation for missing data (countries not surveyed)

    The title focuses on "proportions of people" but the map shows percentages

12. Improve the visualization above by either re-creating it with the issues you identified fixed OR by creating a new visualization that you believe tells the same story better.

```{r}
#| label: second-improved-visualization
#| fig-cap-location: top
library(leaflet)
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)


# 1. Get world map shapefile
world <- ne_countries(scale = "medium", returnclass = "sf")

# 2. Join the vaccination data to the world map
world_vax <- world %>%
  left_join(vaccination_status_summary, by = c("name" = "Country"))

# 3. Create popup text
world_vax <- world_vax %>%
  mutate(
    popup_text = paste0(
      "<strong>Country: </strong>", name, "<br>",
      "<strong>Percent Vaccinated: </strong>", 
      ifelse(!is.na(Proportion_Vaccinated), scales::percent(Proportion_Vaccinated, accuracy = 0.1), "No data")
    )
  )

# Create the color palette function explicitly
# We define the domain so the palette function knows the range of values
pal <- colorNumeric(
  palette = "YlGnBu",
  domain = world_vax$Proportion_Vaccinated,
  na.color = "#CCCCCC"
)

# 4. Create Leaflet map - Single World, Zoomed In Slightly
leaflet(data = world_vax) %>%  # Removed the leafletOptions() that disabled zoom/pan
  addProviderTiles(
    providers$CartoDB.Positron,
    options = providerTileOptions(noWrap = TRUE) # Add this option to prevent repeating world
   ) %>%
  setView(lng = 0, lat = 30, zoom = 2) %>% # Set initial center and zoom level (adjust as needed)
  addPolygons(
    fillColor = ~pal(Proportion_Vaccinated), # Use the pre-defined palette function
    weight = 1,
    opacity = 1,
    color = "white",
    dashArray = "3",
    fillOpacity = 0.7,
    highlightOptions = highlightOptions(
      weight = 3,
      color = "#666",
      dashArray = "",
      fillOpacity = 0.7,
      bringToFront = TRUE
    ),
    label = lapply(world_vax$popup_text, htmltools::HTML),
    labelOptions = labelOptions(
      style = list("font-weight" = "normal", padding = "3px 8px"),
      textsize = "15px",
      direction = "auto"
    )
  ) %>%
  # Add the legend to the map
  addLegend(
    pal = pal,                       # Use the same palette function
    values = ~Proportion_Vaccinated, # Use the data values the colors are based on
    opacity = 0.7,                   # Match the fill opacity used in addPolygons
    title = "Percent Vaccinated", # Set a title for the legend
    position = "bottomright"         # Specify legend position
  )
  # Optional: Add the title control back if desired
  # %>% addControl(html = map_title, position = "topleft")

```

## Third Data Visualization Improvement

**For this third plot, you must use one of the other `ggplot2` extension packages mentioned this week (e.g., `gganimate`, `plotly`, `patchwork`, `cowplot`).**

13. Select a data visualization in the report that you think could be improved. Be sure to cite both the page number and figure title. Do your best to tell the story of this graph in words. That is, what is this graph telling you? What do you think the authors meant to convey with it?![](images/Screenshot%202025-04-14%20at%204.12.31%20PM.png)\
    \
    This visualization shows how people perceive the benefits of science at both personal and societal levels, dividing respondents into four distinct groups:

    Enthusiasts (38%): Believe science benefits both society and individuals

    The Included (29%): Believe science benefits individuals but not necessarily society as a whole

    The Excluded (11%): Believe science benefits society but not individuals in their everyday lives

    Skeptics (8%): Don't see significant benefits from science at either level

    The graph reveals that while most people (67% - Enthusiasts + The Included) believe science benefits individuals, there's more division about its societal benefits. Additionally, 15% of respondents didn't complete both questions and weren't categorized.

14. List the variables that appear to be displayed in this visualization.\
    Views on extent to which science benefits society

    Views on extent to which science benefits people normally

    Response type categories

    Percentage of respondents in each category

15. Now that you're versed in the grammar of graphics (ggplot), list the aesthetics used and which variables are specified for each.\
    x-position: Science benefits to individuals

    y-position: Science benefits to society

    fill/color: Response type category

    size: Percentage of respondents

    label: Category name and percentage

16. What type of graph would you call this?\
    \
    This is a quadrant bubble chart or quadrant scatter plot with sized points.

17. List all of the problems or things you would improve about this graph.\
    \
    Axes lack clear scales (what values define "high" vs "low" benefit?)

    No explanation of how quadrants were defined

    The 15% non-respondents could be visually represented

    No information about survey methodology or sample size

    Color scheme lacks logical pattern (why are "Included" and "Excluded" different colors?)

    Bubble sizes may not accurately represent proportional differences

    No source information provided

    Quadrant labels could better explain what each position represents

    Dividing lines between quadrants are faint

18. Improve the visualization above by either re-creating it with the issues you identified fixed OR by creating a new visualization that you believe tells the same story better.

```{r}
#| label: third-improved-visualization
#| fig-width: 10
#| fig-height: 15
#| fig-align: center
# Load necessary libraries
library(patchwork)  # For combining multiple plots


# Calculate global averages for each category
global_stats <- science_view_summary %>%
  group_by(ViewOfScience_Label) %>%
  summarize(
    total_n = sum(N),
    weighted_prop = sum(N * Proportion) / sum(N)
  )

# Define quadrant positions and characteristics for each category
categories <- tibble(
  ViewOfScience_Label = c("Enthusiast", "Included", "Excluded", "Sceptic"),
  x_pos = c(0.75, 0.75, 0.25, 0.25), # x position in quadrant (right/left)
  y_pos = c(0.25, 0.75, 0.25, 0.75), # y position in quadrant (top/bottom)
  description = c(
    "Believe science benefits both society and individuals",
    "Believe science benefits individuals but not necessarily society",
    "Believe science benefits society but not individuals in their lives",
    "Don't see significant benefits from science at either level"
  ),
  color = c("#FFD166", "#06D6A0", "#73D2DE", "#FFC5D3"), # Gold, Green, Turquoise, Dark Blue
  label_text = c("Enthusiasts", "The Included", "The Excluded", "Sceptics")
)

# Join the category info with the global stats
plot_data <- global_stats %>%
  left_join(categories, by = "ViewOfScience_Label") %>%
  mutate(percent_label = paste0(round(weighted_prop * 100, 1), "%"))

# Total sample size
total_sample <- sum(plot_data$total_n)

# PLOT 1: Main Quadrant Visualization
p1 <- ggplot() +
  # Add quadrant dividing lines
  geom_vline(xintercept = 0.5, linetype = "dashed", color = "gray50", size = 1) +
  geom_hline(yintercept = 0.5, linetype = "dashed", color = "gray50", size = 1) +
  
  # Add bubbles for each category
  geom_point(data = plot_data, 
             aes(x = x_pos, y = y_pos, size = weighted_prop, fill = ViewOfScience_Label),
             shape = 21, color = "white", alpha = 0.9) +
  
  # Add percentage labels inside bubbles
  geom_text(data = plot_data,
            aes(x = x_pos, y = y_pos, label = percent_label),
            color = "white", fontface = "bold", size = 4) +
  
  # Add category names above/below bubbles
  geom_text(data = plot_data,
            aes(x = x_pos, y = y_pos, label = label_text),
            vjust = -2.5, fontface = "bold", size = 3.5) +
  
  # Set scales
  scale_size_continuous(range = c(20, 40)) +
  scale_fill_manual(values = setNames(plot_data$color, plot_data$ViewOfScience_Label)) +
  
  # Set axis labels
  labs(
    x = "Perceived Benefits to Individuals",
    y = "Perceived Benefits to Society"
  ) +
  
  # Add axis direction indicators
  annotate("text", x = c(0.1, 0.9), y = c(0.05, 0.05), 
           label = c("Lower", "Higher"), size = 3.5) +
  annotate("text", x = c(0.05, 0.05), y = c(0.1, 0.9), 
           label = c("Lower", "Higher"), size = 3.5, angle = 90) +
  
  # Clean up the theme
  theme_minimal() +
  theme(
    legend.position = "none",
    panel.grid = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.title = element_text(size = 12, face = "bold"),
    plot.margin = margin(20, 20, 20, 20)
  ) +
  coord_cartesian(xlim = c(0, 1), ylim = c(0, 1))

# PLOT 2: Category Explanations
explanation_df <- tibble(
  category = plot_data$label_text,
  description = plot_data$description,
  percentage = plot_data$percent_label,
  color = plot_data$color
)

p2 <- ggplot(explanation_df, aes(y = 4:1)) +
  geom_segment(aes(x = 0, xend = 0.9, yend = 4:1), color = "gray80") +
  geom_point(aes(x = 0, fill = category), size = 5, shape = 21, color = "white") +
  geom_text(aes(x = 0.1, label = paste0(category, " (", percentage, ")")), 
            hjust = 0, fontface = "bold", size = 3.5) +
  geom_text(aes(x = 0.1, label = description), 
            hjust = 0, vjust = 1.8, size = 3) +
  scale_fill_manual(values = setNames(explanation_df$color, explanation_df$category)) +
  labs(title = "Understanding the Categories") +
  theme_void() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 14, face = "bold", hjust = 0),
    plot.margin = margin(10, 10, 10, 10)
  ) +
  coord_cartesian(xlim = c(-0.1, 4))

# PLOT 3: Selected Countries Comparison
# Select diverse countries to compare
selected_countries <- c("United States", "China", "Germany", "India", "Brazil", "Nigeria")

# Filter for selected countries
country_data <- science_view_summary %>%
  filter(Country %in% selected_countries) %>%
  left_join(categories %>% select(ViewOfScience_Label, color, label_text), by = "ViewOfScience_Label") %>%
  mutate(label_short = gsub("s$", "", label_text))  # Shorter labels for the chart

p3 <- ggplot(country_data, aes(x = label_short, y = Proportion, fill = ViewOfScience_Label)) +
  geom_bar(stat = "identity", width = 0.7) +
  geom_text(aes(label = paste0(round(Proportion * 100, 0), "%")), 
            position = position_stack(vjust = 0.5), 
            color = "white", size = 2.8, fontface = "bold") +
  facet_wrap(~Country, nrow = 2) +
  scale_fill_manual(values = setNames(categories$color, categories$ViewOfScience_Label)) +
  scale_y_continuous(labels = scales::percent, limits = c(0, 1)) +
  labs(
    title = "Country Comparisons",
    x = NULL,
    y = "Percentage"
  ) +
  theme_minimal() +
  theme(
    legend.position = "none",
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
    axis.text.y = element_text(size = 8),
    strip.text = element_text(face = "bold", size = 10),
    plot.title = element_text(size = 14, face = "bold", hjust = 0.5)
  )

# Combine plots using patchwork
combined_plot <- (p1) / (p2 + p3) +
  plot_layout(heights = c(1.2, 1)) +
  plot_annotation(
    title = "How People Feel About the Benefits of Science",
    subtitle = "Combined view of perceived benefits at personal and societal levels",
    caption = paste0("Global survey of 144 countries (n=", format(total_sample, big.mark=","), ")\n",
                    "Note: ~15% of people did not answer one or both questions and were not included in the analysis."),
    theme = theme(
      plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
      plot.subtitle = element_text(size = 14, hjust = 0.5),
      plot.caption = element_text(size = 10, hjust = 1)
    )
  )

combined_plot
```
